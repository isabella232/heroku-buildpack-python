#!/usr/bin/env bash

# This buildpack step is based on https://github.com/heroku/heroku-buildpack-python
# and https://github.com/wyn/heroku-buildpack-python, slightly modified for my own
# nefarious purposes for scikits.audiolab / consistency with heroku's buildpack
# look and feel. If you're just looking for np/scipy use, I recommend
# https://github.com/wyn/heroku-buildpack-python.

set -eo pipefail

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd)
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
VENDOR_DIR=".heroku/vendor"

# The detected application type (`Python`|`Python/Django`).
NAME=$($BIN_DIR/detect $BUILD_DIR)

# Where to store the Pip download cache.
CACHED_DIRS=".heroku"
PIP_DOWNLOAD_CACHE=${PIP_DOWNLOAD_CACHE:-$CACHE_DIR/pip_downloads}

# Static configurations for virtualenv caches.
LEGACY_VIRTUALENV_LOC="."
MODERN_VIRTUALENV_LOC=".heroku/venv"
LEGACY_VIRTUALENV_DIRS="bin include lib"
LEGACY_VIRTUALENV_TRIGGER="lib/python2.7"

# Sanitizing environment variables.
unset GIT_DIR
unset PYTHON_HOME
unset PYTHONPATH

export PIP_DOWNLOAD_CACHE
export BUILD_DIR

# Syntax sugar.
indent () {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

puts () {
  printf -- "$1 "
  shift 1

  if [ -n "$3" ]; then
    printf -- "\033[$1m[$2] \033[0m"
    shift 1
  fi

  shift 1

  echo "$@"
}

pipe-step () {
  if [ ! -t 0 ]; then
    while read data; do
      if [ ! -z "$data" ]; then
        if [ -n "$1" ]; then
          puts-step $1 "$data"
        else
          puts-step "$data"
        fi
      fi
    done
  fi
}

pipe-warn () {
  if [ ! -t 0 ]; then
    while read data; do
      if [ ! -z "$data" ]; then
        if [ -n "$1" ]; then
          puts-warn $1 "$data"
        else
          puts-warn "$data"
        fi
      fi
    done
  fi
}

puts-step () {
  puts "----->" "32" "$@"
}

puts-warn () {
  puts "!     " "31" "$@"
}

#virtualenv () {
#  python "$ROOT_DIR/vendor/virtualenv-1.7/virtualenv.py" "$@"
#}

##############################################
# Front matter.                              #
##############################################

# Switch to the repo's context.
cd $BUILD_DIR

# If no requirements given, assume `setup.py develop`.
if [ ! -f requirements.txt ]; then
  puts-step "No requirements.txt provided; assuming dist package."
  echo "-e ." > requirements.txt
fi

# Cache / heroku folder.
mkdir -p $CACHE_DIR
mkdir -p .heroku
mkdir -p $VENDOR_DIR

# Nice defaults.
LEGACY_VIRTUALENV=false
VIRTUALENV_LOC=$MODERN_VIRTUALENV_LOC

# Support "old-style" virtualenvs.
if [ -d $CACHE_DIR/$LEGACY_VIRTUALENV_TRIGGER ]; then
  LEGACY_VIRTUALENV=true
  VIRTUALENV_LOC=$LEGACY_VIRTUALENV_LOC
  CACHED_DIRS=$LEGACY_VIRTUALENV_DIRS

  # Warn for a checked-in virtualenv.
  if [ -d "lib" ] || [ -d "bin" ]; then
    puts-warn "You have a virtualenv checked in. You should ignore the appropriate paths in your repo. See http://devcenter.heroku.com/articles/gitignore for more info."
  fi

  # Reject a conflicting checked-in virtualenv.
  if [ -f "lib/python2.7" ]; then
    puts-warn "Checked-in virtualenv conflict."
    exit 1;
  fi
fi

##############################################
# Restore cache.                             #
##############################################

if [ ! -n "$EMPTYCACHE" ]; then
  puts-step "Restoring cache from $CACHE_DIR."

  for dir in $CACHED_DIRS; do
    cp -R $CACHE_DIR/$dir . &> /dev/null || true
  done
else
  puts-step "Ignoring cache (EMPTYCACHE=$EMPTYCACHE)."
  rm -rf $CACHE_DIR
fi

##############################################
# Create the virtualenv. Rebuild if corrupt. #
##############################################

set +e

echo $PATH
puts-step "Creating virtualenv ($(virtualenv --version))."

if [ -e $VIRTUALENV_LOC ]; then
  puts-step "Using cached virtualenv."
else
  # Try to create the virtualenv.
  OUT=$(virtualenv --never-download --prompt='(venv) ' $VIRTUALENV_LOC 2>&1)

  # If there's an error, purge and recreate.
  [ $? -ne 0 ] && {
    puts-warn "virtualenv" "Virtualenv corrupt, rebuilding."

    for dir in $VIRTUALENV_DIRS; do
      rm -fr $dir &> /dev/null || true
    done

    OUT=$(virtualenv --never-download  --prompt='(venv) ' $VIRTUALENV_LOC)
  }

  #echo "$OUT" | indent
fi

set -e

##############################################
# Activate virtualenv.                       #
##############################################

puts-step "Activating virtualenv."
source $VIRTUALENV_LOC/bin/activate

# In case we restored a cached virtualenv, we
# need to remove the old venv/bin from our
# PATH, since the /tmp/ directories change
# every push. Otherwise, we won't be able to
# find pip.

echo $PATH
export PATH=$PWD/$VIRTUALENV_LOC/bin:`echo $PATH | awk -v RS=: -v ORS=: '/tmp/ {next} {print}' | sed 's/:*$//'`
echo $PATH


##############################################
# Compile specific dependencies before Pip.  #
##############################################

source $BIN_DIR/steps/scipy

##############################################
# Install Mercurial if needed.               #
##############################################

if (grep -Fiq "hg+" requirements.txt) then
  puts-step "pip" "Installing Mercurial."
  pip install --use-mirrors mercurial 2>&1 >/dev/null | pipe-warn 'pip'
fi

##############################################
# Install Python dependencies with Pip.      #
##############################################

puts-step "pip" "Installing Python dependencies."

# Prevent pip from trying to install packages we already installed manually.
cat requirements.txt | grep -vie "numpy" -vie "scipy" > requirements2.txt
pip install --use-mirrors -r requirements2.txt --src ./.heroku/src | indent

##############################################
# Django-specific.                           #
##############################################

if [ "$NAME" = "Python/Django" ] && ! [ "$DISABLE_INJECTION" ]; then
  source $BIN_DIR/steps/django
fi

##############################################
# Make virtualenv paths relative.            #
##############################################

set +e

OUT=$(virtualenv --relocatable $VIRTUALENV_LOC)
[ $? -ne 0 ] && {
  puts-warn "Error making virtualenv relocatable"
  echo "$OUT" | pipe-warn
  exit 1
}

set -e

##############################################
# Store everything in the cache.             #
##############################################

puts-step "Updating cache."

for dir in $CACHED_DIRS; do
  rm -rf $CACHE_DIR/$dir
  cp -R $dir $CACHE_DIR/
done

# Remove vendor dir after caching to reduce slug size.
rm -rf $VENDOR_DIR
